{
    "$schema":"https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name":"Xenon",
    "scopeName":"source.x",
    "patterns":[
        {
            "include":"#comments"
        },
        {
            "include":"#strings"
        },
        {
            "include":"#keywords"
        },
        {
            "include":"#operators"
        },
        {
            "include":"#numbers"
        },
        {
            "include":"#support"
        },
        {
            "include":"#variables"
		}
    ],
    "repository":{
        "variables":{
            "patterns":[
                {
                    "name":"meta.function.declaration.xenon",
                    "patterns":[
                        {
                            "match":"\\b(fn)\\s+([A-Z][a-zA-Z0-9]*)\\b",
                            "captures":{
                                "1":{
                                    "name":"storage.type.function.xenon"
                                },
                                "2":{
                                    "name":"entity.name.type.xenon"
                                }
                            }
                        },
                        {
                            "match":"\\b(fn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
                            "captures":{
                                "1":{
                                    "name":"storage.type.function.xenon"
                                },
                                "2":{
                                    "name":"entity.name.function.xenon"
                                }
                            }
                        },
                        {
                            "begin":"\\b(fn)\\s+@\"",
                            "end":"\"",
                            "name":"entity.name.function.xenon",
                            "beginCaptures":{
                                "1":{
                                    "name":"storage.type.function.xenon"
                                }
                            },
                            "patterns":[
                                {
                                    "include":"#stringcontent"
                                }
                            ]
                        },
                        {
                            "name":"keyword.default.xenon",
                            "match":"\\b(const|var|fn)\\b"
                        }
                    ]
                },
                {
                    "name":"meta.function.call.xenon",
                    "patterns":[
                        {
                            "match":"([A-Z][a-zA-Z0-9]*)(?=\\s*\\()",
                            "name":"entity.name.type.xenon"
                        },
                        {
                            "match":"([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()",
                            "name":"entity.name.function.xenon"
                        }
                    ]
                },
                {
                    "name":"meta.variable.xenon",
                    "patterns":[
                        {
                            "match":"\\b[_A-Z][_A-Z0-9]+\\b",
                            "name":"variable.constant.xenon"
                        },
                        {
                            "match":"\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b",
                            "name":"entity.name.type.xenon"
                        },
                        {
                            "match":"\\b[A-Z][a-zA-Z0-9]*\\b",
                            "name":"entity.name.type.xenon"
                        },
                        {
                            "match":"\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
                            "name":"variable.xenon"
                        },
                        {
                            "begin":"@\"",
                            "end":"\"",
                            "name":"variable.xenon",
                            "patterns":[
                                {
                                    "include":"#stringcontent"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "keywords":{
            "patterns":[
                {
                    "match":"(\\binline\\b)?\\s*\\b(while|for)\\b",
                    "name":"keyword.control.repeat.xenon"
                },
                {
                    "name":"keyword.storage.xenon",
                    "match":"\\b(export)\\b"
                },
                {
                    "name":"keyword.structure.xenon",
                    "match":"\\b(struct|enum)\\b"
                },
                {
                    "name":"keyword.control.flow.xenon",
                    "match":"\\b(break|return|continue|defer|errdefer)\\b"
                },
                {
                    "name":"keyword.control.async.xenon",
                    "match":"\\b(await|resume|suspend|async|nosuspend)\\b"
                },
                {
                    "name":"keyword.control.trycatch.xenon",
                    "match":"\\b(try|catch)\\b"
                },
                {
                    "name":"keyword.control.conditional.xenon",
                    "match":"\\b(if|else|switch|orelse)\\b"
                },
                {
                    "name":"keyword.constant.default.xenon",
                    "match":"\\b(null|undefined)\\b"
                },
                {
                    "name":"keyword.constant.bool.xenon",
                    "match":"\\b(true|false)\\b"
                },
                {
                    "match":"[\\s\\(\\[\\{](\\.[_a-zA-Z][_a-zA-Z0-9]*)(?!\\s*=[^>])(?![_a-zA-Z0-9])",
                    "captures":{
                        "1":{
                            "name":"variable.other.enummember.xenon"
                        }
                    }
                },
                {
                    "name":"keyword.default.xenon",
                    "match":"\\b(import|test|and|or)\\b"
				},
                {
                    "name":"meta.error-set.xenon",
                    "patterns":[
                        {
                            "begin":"\\b(error)\\b\\s*{",
                            "end":"}",
                            "beginCaptures":{
                                "1":{
                                    "name":"keyword.type.xenon"
                                }
                            },
                            "patterns":[
                                {
                                    "match":"\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
                                    "name":"variable.constant.error.xenon"
                                },
                                {
                                    "include":"$self"
                                }
                            ]
                        },
                        {
                            "begin":"\\b(error)\\b",
                            "end":"\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b",
                            "beginCaptures":{
                                "1":{
                                    "name":"keyword.type.xenon"
                                }
                            },
                            "endCaptures":{
                                "1":{
                                    "name":"variable.constant.error.xenon"
                                }
                            },
                            "patterns":[
                                {
                                    "include":"$self"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name":"keyword.type.xenon",
                    "match":"\\b(bool|void|noreturn|type|error|anyerror|anyframe|anytype)\\b"
                },
                {
                    "name":"keyword.type.integer.xenon",
                    "match":"\\b(f16|f32|f64|f128|u\\d+|i\\d+|isize|usize|comptime_int|comptime_float)\\b"
                },
                {
                    "name":"keyword.type.c.xenon",
                    "match":"\\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b"
                }
            ]
        },
        "operators":{
            "patterns":[
                {
                    "name":"keyword.operator.c-pointer.xenon",
                    "match":"\\[*c\\]"
                },
                {
                    "name":"keyword.operator.comparison.xenon",
                    "match":"(\\b(and|or)\\b)|(==|!=)"
                },
                {
                    "name":"keyword.operator.arithmetic.xenon",
                    "match":"(-%?|\\+%?|\\*%?|/|%)=?"
                },
                {
                    "name":"keyword.operator.bitwise.xenon",
                    "match":"(<<%?|>>|!|&|\\^|\\|)=?"
                },
                {
                    "name":"keyword.operator.special.xenon",
                    "match":"(==|\\+\\+|\\*\\*|->)"
                }
            ]
        },
        "comments":{
            "patterns":[
                {
                    "name":"comment.line.documentation.xenon",
                    "begin":"//[!/](?=[^/])",
                    "end":"$",
                    "patterns":[
                        {
                            "include":"#commentContents"
                        }
                    ]
                },
                {
                    "name":"comment.line.double-slash.xenon",
                    "begin":"//",
                    "end":"$",
                    "patterns":[
                        {
                            "include":"#commentContents"
                        }
                    ]
                }
            ]
        },
        "commentContents":{
            "patterns":[
                {
                    "match":"\\b(TODO|!|NOTE|DEBUG)\\b:?",
                    "name":"keyword.todo.xenon"
                }
            ]
        },
        "strings":{
            "patterns":[
                {
                    "name":"string.quoted.double.xenon",
                    "begin":"\"",
                    "end":"\"",
                    "patterns":[
                        {
                            "include":"#stringcontent"
                        }
                    ]
                },
                {
                    "name":"string.multiline.xenon",
                    "begin":"\\\\\\\\",
                    "end":"$"
                },
                {
                    "name":"string.quoted.single.xenon",
                    "match":"'([^'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
                }
            ]
        },
        "stringcontent":{
            "patterns":[
                {
                    "name":"constant.character.escape.xenon",
                    "match":"\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
                },
                {
                    "name":"invalid.illegal.unrecognized-string-escape.xenon",
                    "match":"\\\\."
                }
            ]
        },
        "numbers":{
            "patterns":[
                {
                    "name":"constant.numeric.float.xenon",
                    "match":"\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
                },
                {
                    "name":"constant.numeric.decimal.xenon",
                    "match":"\\b[0-9][0-9_]*\\b"
                },
                {
                    "name":"constant.numeric.hexadecimal.xenon",
                    "match":"\\b0x[a-fA-F0-9_]+\\b"
                },
                {
                    "name":"constant.numeric.octal.xenon",
                    "match":"\\b0o[0-7_]+\\b"
                },
                {
                    "name":"constant.numeric.binary.xenon",
                    "match":"\\b0b[01_]+\\b"
                }
            ]
        },
        "support":{
            "patterns":[
                {
                    "comment":"Built-in functions",
                    "name":"support.function.builtin.xenon",
                    "match":"@[_a-zA-Z][_a-zA-Z0-9]*"
                }
            ]
        }
    }
}